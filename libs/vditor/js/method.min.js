!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Vditor=t():e.Vditor=t()}(this,(()=>(()=>{"use strict";var e={54:(e,t,n)=>{n.d(t,{g:()=>r});var r=function(){function e(){}return e.ZWSP="​",e.DROP_EDITOR="application/editor",e.MOBILE_WIDTH=520,e.CLASS_MENU_DISABLED="vditor-menu--disabled",e.EDIT_TOOLBARS=["emoji","headings","bold","italic","strike","link","list","ordered-list","outdent","indent","check","line","quote","code","inline-code","insert-after","insert-before","upload","record","table"],e.CODE_THEME=["abap","algol","algol_nu","arduino","autumn","borland","bw","colorful","dracula","emacs","friendly","fruity","github","igor","lovelace","manni","monokai","monokailight","murphy","native","paraiso-dark","paraiso-light","pastie","perldoc","pygments","rainbow_dash","rrt","solarized-dark","solarized-dark256","solarized-light","swapoff","tango","trac","vim","vs","xcode","ant-design"],e.CODE_LANGUAGES=["mermaid","echarts","mindmap","plantuml","abc","graphviz","flowchart","apache","js","ts","html","markmap","properties","apache","bash","c","csharp","cpp","css","coffeescript","diff","go","xml","http","json","java","javascript","kotlin","less","lua","makefile","markdown","nginx","objectivec","php","php-template","perl","plaintext","python","python-repl","r","ruby","rust","scss","sql","shell","swift","ini","typescript","vbnet","yaml","ada","clojure","dart","erb","fortran","gradle","haskell","julia","julia-repl","lisp","matlab","pgsql","powershell","sql_more","stata","cmake","mathematica","solidity","yul"],e.CDN="https://unpkg.com/vditor@3.9.5",e.DIST="dist",e.BASE_URL=e.CDN+"/"+e.DIST,e._STATIC_PATH={logo:"images/logo.png",method:"method.min.js",style:"index.css",emoji:"images/emoji",i18n:"js/i18n",icons:"js/icons",theme:"css/content-theme",abc:"js/abcjs/abcjs_basic.min.js",echarts:"js/echarts/echarts.min.js",flowchart:"js/flowchart.js/flowchart.min.js",graphviz:"js/graphviz/viz.js",lute:"js/lute/lute.min.js",markmap:"js/markmap/markmap.min.js",mermaid:"js/mermaid/mermaid.min.js",plantuml:"js/plantuml/plantuml-encoder.min.js",highlight:"js/highlight.js",katex:"js/katex",mathjax:"js/mathjax"},e.STATIC_PATH={logo:e.BASE_URL+"/"+e._STATIC_PATH.logo,method:e.BASE_URL+"/"+e._STATIC_PATH.method,style:e.BASE_URL+"/"+e._STATIC_PATH.style,emoji:e.BASE_URL+"/"+e._STATIC_PATH.emoji,i18n:e.BASE_URL+"/"+e._STATIC_PATH.i18n,icons:e.BASE_URL+"/"+e._STATIC_PATH.icons,theme:e.BASE_URL+"/"+e._STATIC_PATH.theme,abc:e.BASE_URL+"/"+e._STATIC_PATH.abc,echarts:e.BASE_URL+"/"+e._STATIC_PATH.echarts,flowchart:e.BASE_URL+"/"+e._STATIC_PATH.flowchart,graphviz:e.BASE_URL+"/"+e._STATIC_PATH.graphviz,lute:e.BASE_URL+"/"+e._STATIC_PATH.lute,markmap:e.BASE_URL+"/"+e._STATIC_PATH.markmap,mermaid:e.BASE_URL+"/"+e._STATIC_PATH.mermaid,plantuml:e.BASE_URL+"/"+e._STATIC_PATH.plantuml,highlight:e.BASE_URL+"/"+e._STATIC_PATH.highlight,katex:e.BASE_URL+"/"+e._STATIC_PATH.katex,mathjax:e.BASE_URL+"/"+e._STATIC_PATH.mathjax},e.MARKDOWN_OPTIONS={autoSpace:!1,gfmAutoLink:!0,codeBlockPreview:!0,fixTermTypo:!1,footnotes:!0,linkBase:"",linkPrefix:"",listStyle:!1,mark:!1,mathBlockPreview:!0,paragraphBeginningSpace:!1,sanitize:!0,toc:!1},e.HLJS_OPTIONS={enable:!0,lineNumber:!1,defaultLang:"",style:"github"},e.MATH_OPTIONS={engine:"KaTeX",inlineDigit:!1,macros:{}},e.THEME_OPTIONS={current:"light",list:{"ant-design":"Ant Design",dark:"Dark",light:"Light",wechat:"WeChat"},path:e.STATIC_PATH.theme},e}()},478:(e,t,n)=>{n.d(t,{Q:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t){void 0===e&&(e=document),void 0===t&&(t=r.g.STATIC_PATH.abc);var n=i.abcRenderAdapter.getElements(e);n.length>0&&(0,a.G)(t,"vditorAbcjsScript").then((function(){n.forEach((function(e){e.parentElement.classList.contains("vditor-wysiwyg__pre")||e.parentElement.classList.contains("vditor-ir__marker--pre")||"true"!==e.getAttribute("data-processed")&&(ABCJS.renderAbc(e,i.abcRenderAdapter.getCode(e).trim()),e.style.overflowX="auto",e.setAttribute("data-processed","true"))}))}))}},156:(e,t,n)=>{n.r(t),n.d(t,{abcRenderAdapter:()=>c,chartRenderAdapter:()=>s,flowchartRenderAdapter:()=>d,graphvizRenderAdapter:()=>l,markmapRenderAdapter:()=>i,mathRenderAdapter:()=>r,mermaidRenderAdapter:()=>a,mindmapRenderAdapter:()=>o,plantumlRenderAdapter:()=>m});var r={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-math")}},a={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-mermaid")}},i={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-markmap")}},o={getCode:function(e){return e.getAttribute("data-code")},getElements:function(e){return e.querySelectorAll(".language-mindmap")}},s={getCode:function(e){return e.innerText},getElements:function(e){return e.querySelectorAll(".language-echarts")}},c={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-abc")}},l={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-graphviz")}},d={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-flowchart")}},m={getCode:function(e){return e.textContent},getElements:function(e){return e.querySelectorAll(".language-plantuml")}}},314:(e,t,n)=>{n.d(t,{p:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t,n){void 0===e&&(e=document),void 0===t&&(t=r.g.STATIC_PATH.echarts);var o=i.chartRenderAdapter.getElements(e);o.length>0&&(0,a.G)(t,"vditorEchartsScript").then((function(){o.forEach((function(e){if(!e.parentElement.classList.contains("vditor-wysiwyg__pre")&&!e.parentElement.classList.contains("vditor-ir__marker--pre")){var t=i.chartRenderAdapter.getCode(e).trim();if(t)try{if("true"===e.getAttribute("data-processed"))return;var r=JSON.parse(t);echarts.init(e,"dark"===n?"dark":void 0).setOption(r),e.setAttribute("data-processed","true")}catch(t){e.className="vditor-reset--error",e.innerHTML="echarts render error: <br>"+t}}}))}))}},730:(e,t,n)=>{n.d(t,{O:()=>i});var r=n(51),a=n(54),i=function(e){e.querySelectorAll("pre > code").forEach((function(t,n){var i,o,s;if(!t.parentElement.classList.contains("vditor-wysiwyg__pre")&&!t.parentElement.classList.contains("vditor-ir__marker--pre")&&!(t.classList.contains("language-mermaid")||t.classList.contains("language-flowchart")||t.classList.contains("language-echarts")||t.classList.contains("language-mindmap")||t.classList.contains("language-plantuml")||t.classList.contains("language-markmap")||t.classList.contains("language-abc")||t.classList.contains("language-graphviz")||t.classList.contains("language-math")||t.style.maxHeight.indexOf("px")>-1||e.classList.contains("vditor-preview")&&n>5)){var c=t.innerText;if(t.classList.contains("highlight-chroma")){var l=document.createElement("code");l.innerHTML=t.innerHTML,l.querySelectorAll(".highlight-ln").forEach((function(e){e.remove()})),c=l.innerText}else c.endsWith("\n")&&(c=c.substr(0,c.length-1));var d='<svg><use xlink:href="#vditor-icon-copy"></use></svg>';document.getElementById("vditorIconScript")||(d='<svg viewBox="0 0 32 32"><path d="M22.545-0h-17.455c-1.6 0-2.909 1.309-2.909 2.909v20.364h2.909v-20.364h17.455v-2.909zM26.909 5.818h-16c-1.6 0-2.909 1.309-2.909 2.909v20.364c0 1.6 1.309 2.909 2.909 2.909h16c1.6 0 2.909-1.309 2.909-2.909v-20.364c0-1.6-1.309-2.909-2.909-2.909zM26.909 29.091h-16v-20.364h16v20.364z"></path></svg>');var m=document.createElement("div");m.className="vditor-copy",m.innerHTML='<span aria-label="'+((null===(i=window.VditorI18n)||void 0===i?void 0:i.copy)||"复制")+"\"\nonmouseover=\"this.setAttribute('aria-label', '"+((null===(o=window.VditorI18n)||void 0===o?void 0:o.copy)||"复制")+"')\"\nclass=\"vditor-tooltipped vditor-tooltipped__w\"\nonclick=\"this.previousElementSibling.select();document.execCommand('copy');this.setAttribute('aria-label', '"+((null===(s=window.VditorI18n)||void 0===s?void 0:s.copied)||"已复制")+"')\">"+d+"</span>";var u=document.createElement("textarea");u.value=(0,r.X)(c),m.insertAdjacentElement("afterbegin",u),t.before(m),t.style.maxHeight=window.outerHeight-40+"px",t.insertAdjacentHTML("afterend",'<span style="position: absolute">'+a.g.ZWSP+"</span>")}}))}},66:(e,t,n)=>{n.d(t,{P:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t){void 0===t&&(t=r.g.STATIC_PATH.flowchart);var n=i.flowchartRenderAdapter.getElements(e);0!==n.length&&(0,a.G)(t,"vditorFlowchartScript").then((function(){n.forEach((function(e){if("true"!==e.getAttribute("data-processed")){var t=flowchart.parse(i.flowchartRenderAdapter.getCode(e));e.innerHTML="",t.drawSVG(e),e.setAttribute("data-processed","true")}}))}))}},218:(e,t,n)=>{n.d(t,{v:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t){void 0===t&&(t=r.g.STATIC_PATH.graphviz);var n=i.graphvizRenderAdapter.getElements(e);0!==n.length&&(0,a.G)(t,"vditorGraphVizScript").then((function(){n.forEach((function(e){var t=i.graphvizRenderAdapter.getCode(e);if(!e.parentElement.classList.contains("vditor-wysiwyg__pre")&&!e.parentElement.classList.contains("vditor-ir__marker--pre")&&"true"!==e.getAttribute("data-processed")&&""!==t.trim()){try{var n=new Blob(["importScripts('"+document.getElementById("vditorGraphVizScript").src.replace("viz.js","full.render.js")+"');"],{type:"application/javascript"}),r=(window.URL||window.webkitURL).createObjectURL(n),a=new Worker(r);new Viz({worker:a}).renderSVGElement(t).then((function(t){e.innerHTML=t.outerHTML})).catch((function(t){e.innerHTML="graphviz render error: <br>"+t,e.className="vditor-reset--error"}))}catch(e){console.error("graphviz error",e)}e.setAttribute("data-processed","true")}}))}))}},702:(e,t,n)=>{n.d(t,{s:()=>o});var r=n(54),a=n(526),i=n(578),o=function(e,t,n){void 0===t&&(t=document),void 0===n&&(n=r.g.STATIC_PATH.highlight);var o=e.style;r.g.CODE_THEME.includes(o)||(o="github");var s=document.getElementById("vditorHljsStyle"),c=n+"/styles/"+o+".css";(s&&s.href!==c&&s.remove(),(0,i.c)(n+"/styles/"+o+".css","vditorHljsStyle"),!1!==e.enable)&&(0!==t.querySelectorAll("pre > code").length&&(0,a.G)(n+"/highlight.pack.js","vditorHljsScript").then((function(){(0,a.G)(n+"/solidity.min.js","vditorHljsSolidityScript").then((function(){(0,a.G)(n+"/yul.min.js","vditorHljsYulScript").then((function(){t.querySelectorAll("pre > code").forEach((function(t){if(!t.parentElement.classList.contains("vditor-ir__marker--pre")&&!t.parentElement.classList.contains("vditor-wysiwyg__pre")&&!(t.classList.contains("language-mermaid")||t.classList.contains("language-flowchart")||t.classList.contains("language-echarts")||t.classList.contains("language-mindmap")||t.classList.contains("language-plantuml")||t.classList.contains("language-abc")||t.classList.contains("language-graphviz")||t.classList.contains("language-math"))&&(""!==e.defaultLang&&-1===t.className.indexOf("language-")&&t.classList.add("language-"+e.defaultLang),hljs.highlightElement(t),e.lineNumber)){t.classList.add("vditor-linenumber");var n=t.querySelector(".vditor-linenumber__temp");n||((n=document.createElement("div")).className="vditor-linenumber__temp",t.insertAdjacentElement("beforeend",n));var r=getComputedStyle(t).whiteSpace,a=!1;"pre-wrap"!==r&&"pre-line"!==r||(a=!0);var i="",o=t.textContent.split(/\r\n|\r|\n/g);o.pop(),o.map((function(e){var t="";a&&(n.textContent=e||"\n",t=' style="height:'+n.getBoundingClientRect().height+'px"'),i+="<span"+t+"></span>"})),n.style.display="none",i='<span class="vditor-linenumber__rows">'+i+"</span>",t.insertAdjacentHTML("beforeend",i)}}))}))}))})))}},563:(e,t,n)=>{n.d(t,{K:()=>c});var r=n(54),a=n(526),i=n(156),o={},s=function(e,t){var n=window.markmap,r=n.Transformer,a=n.Markmap,i=n.deriveOptions,s=(n.globalCSS,new r);e.innerHTML='<svg style="width:100%"></svg>';var c=e.firstChild,l=a.create(c,null),d=function(e,t){var n=e.transform(t),r=Object.keys(n.features).filter((function(e){return!o[e]}));r.forEach((function(e){o[e]=!0}));var a=e.getAssets(r),i=a.styles,s=a.scripts,c=window.markmap;return i&&c.loadCSS(i),s&&c.loadJS(s),n}(s,t),m=d.root,u=d.frontmatter,p=i(null==u?void 0:u.markmap);l.setData(m,p),l.fit()},c=function(e,t,n){void 0===t&&(t=r.g.STATIC_PATH.markmap);var o=i.markmapRenderAdapter.getElements(e);0!==o.length&&(0,a.G)(t,"vditorMermaidScript").then((function(){o.forEach((function(e){var t=i.markmapRenderAdapter.getCode(e);if("true"!==e.getAttribute("data-processed")&&""!==t.trim()){var n=document.createElement("div");n.className="language-markmap",e.parentNode.appendChild(n),s(n,t),"CODE"==e.parentNode.childNodes[0].nodeName&&e.parentNode.removeChild(e.parentNode.childNodes[0])}}))}))}},466:(e,t,n)=>{n.d(t,{H:()=>c});var r=n(54),a=n(526),i=n(578),o=n(51),s=n(156),c=function(e,t){var n=s.mathRenderAdapter.getElements(e);if(0!==n.length){var c={katex:r.g.STATIC_PATH.katex,mathjax:r.g.STATIC_PATH.mathjax,math:{engine:"KaTeX",inlineDigit:!1,macros:{}}};if(t&&t.math&&(t.math=Object.assign({},c.math,t.math)),"KaTeX"===(t=Object.assign({},c,t)).math.engine)(0,i.c)(t.katex+"/katex.min.css","vditorKatexStyle"),(0,a.G)(t.katex+"/katex.min.js","vditorKatexScript").then((function(){(0,a.G)(t.katex+"/mhchem.min.js","vditorKatexChemScript").then((function(){n.forEach((function(e){if(!e.parentElement.classList.contains("vditor-wysiwyg__pre")&&!e.parentElement.classList.contains("vditor-ir__marker--pre")&&!e.getAttribute("data-math")){var t=(0,o.X)(s.mathRenderAdapter.getCode(e));e.setAttribute("data-math",t);try{e.innerHTML=katex.renderToString(t,{displayMode:"DIV"===e.tagName,output:"html"})}catch(t){e.innerHTML=t.message,e.className="language-math vditor-reset--error"}e.addEventListener("copy",(function(e){e.stopPropagation(),e.preventDefault();var t=e.currentTarget.closest(".language-math");e.clipboardData.setData("text/html",t.innerHTML),e.clipboardData.setData("text/plain",t.getAttribute("data-math"))}))}}))}))}));else if("MathJax"===t.math.engine){window.MathJax||(window.MathJax={loader:{paths:{mathjax:t.mathjax}},startup:{typeset:!1},tex:{macros:t.math.macros}},Object.assign(window.MathJax,t.math.mathJaxOptions)),(0,a.J)(t.mathjax+"/tex-svg-full.js","protyleMathJaxScript");var l=function(e,t){var n=(0,o.X)(e.textContent).trim(),r=window.MathJax.getMetricsFor(e);r.display="DIV"===e.tagName,window.MathJax.tex2svgPromise(n,r).then((function(r){e.innerHTML="",e.setAttribute("data-math",n),e.append(r),window.MathJax.startup.document.clear(),window.MathJax.startup.document.updateDocument();var a=r.querySelector('[data-mml-node="merror"]');a&&""!==a.textContent.trim()&&(e.innerHTML=a.textContent.trim(),e.className="vditor-reset--error"),t&&t()}))};window.MathJax.startup.promise.then((function(){for(var e=[],t=function(t){var r=n[t];r.parentElement.classList.contains("vditor-wysiwyg__pre")||r.parentElement.classList.contains("vditor-ir__marker--pre")||r.getAttribute("data-math")||!(0,o.X)(r.textContent).trim()||e.push((function(e){t===n.length-1?l(r):l(r,e)}))},r=0;r<n.length;r++)t(r);!function(e){if(0!==e.length){var t=0,n=e[e.length-1],r=function(){var a=e[t++];a===n?a():a(r)};r()}}(e)}))}}}},554:(e,t,n)=>{n.d(t,{Y:()=>r});var r=function(e){e&&e.querySelectorAll("a").forEach((function(e){var t=e.getAttribute("href");t&&(t.match(/^.+.(mp4|m4v|ogg|ogv|webm)$/)?function(e,t){e.insertAdjacentHTML("afterend",'<video controls="controls" src="'+t+'"></video>'),e.remove()}(e,t):t.match(/^.+.(mp3|wav|flac)$/)?function(e,t){e.insertAdjacentHTML("afterend",'<audio controls="controls" src="'+t+'"></audio>'),e.remove()}(e,t):function(e,t){var n=t.match(/\/\/(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w|-]{11})(?:(?:[\?&]t=)(\S+))?/),r=t.match(/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/),a=t.match(/\/\/v\.qq\.com\/x\/cover\/.*\/([^\/]+)\.html\??.*/),i=t.match(/(?:www\.|\/\/)coub\.com\/view\/(\w+)/),o=t.match(/(?:www\.|\/\/)facebook\.com\/([^\/]+)\/videos\/([0-9]+)/),s=t.match(/.+dailymotion.com\/(video|hub)\/(\w+)\?/),c=t.match(/(?:www\.|\/\/)bilibili\.com\/video\/(\w+)/),l=t.match(/(?:www\.|\/\/)ted\.com\/talks\/(\w+)/);n&&11===n[1].length?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video" src="//www.youtube.com/embed/'+n[1]+(n[2]?"?start="+n[2]:"")+'"></iframe>'),e.remove()):r&&r[1]?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video" src="//player.youku.com/embed/'+r[1]+'"></iframe>'),e.remove()):a&&a[1]?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video" src="https://v.qq.com/txp/iframe/player.html?vid='+a[1]+'"></iframe>'),e.remove()):i&&i[1]?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video"\n src="//coub.com/embed/'+i[1]+'?muted=false&autostart=false&originalSize=true&startWithHD=true"></iframe>'),e.remove()):o&&o[0]?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video"\n src="https://www.facebook.com/plugins/video.php?href='+encodeURIComponent(o[0])+'"></iframe>'),e.remove()):s&&s[2]?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video"\n src="https://www.dailymotion.com/embed/video/'+s[2]+'"></iframe>'),e.remove()):c&&c[1]?(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video"\n src="//player.bilibili.com/player.html?bvid='+c[1]+'"></iframe>'),e.remove()):l&&l[1]&&(e.insertAdjacentHTML("afterend",'<iframe class="iframe__video" src="//embed.ted.com/talks/'+l[1]+'"></iframe>'),e.remove())}(e,t))}))}},40:(e,t,n)=>{n.d(t,{i:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t,n){void 0===t&&(t=r.g.STATIC_PATH.mermaid);var o=i.mermaidRenderAdapter.getElements(e);0!==o.length&&(0,a.G)(t,"vditorMermaidScript").then((function(){var e={securityLevel:"loose",altFontFamily:"sans-serif",fontFamily:"sans-serif",startOnLoad:!1,flowchart:{htmlLabels:!0,useMaxWidth:!0},sequence:{useMaxWidth:!0,diagramMarginX:8,diagramMarginY:8,boxMargin:8},gantt:{leftPadding:75,rightPadding:20}};"dark"===n&&(e.theme="dark"),mermaid.initialize(e),o.forEach((function(e){var t=i.mermaidRenderAdapter.getCode(e);"true"!==e.getAttribute("data-processed")&&""!==t.trim()&&(mermaid.init(void 0,e),e.setAttribute("data-processed","true"))}))}))}},749:(e,t,n)=>{n.d(t,{P:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t,n){void 0===e&&(e=document),void 0===t&&(t=r.g.STATIC_PATH.echarts);var o=i.mindmapRenderAdapter.getElements(e);o.length>0&&(0,a.G)(t,"vditorEchartsScript").then((function(){o.forEach((function(e){if(!e.parentElement.classList.contains("vditor-wysiwyg__pre")&&!e.parentElement.classList.contains("vditor-ir__marker--pre")){var t=i.mindmapRenderAdapter.getCode(e);if(t)try{if("true"===e.getAttribute("data-processed"))return;echarts.init(e,"dark"===n?"dark":void 0).setOption({series:[{data:[JSON.parse(decodeURIComponent(t))],initialTreeDepth:-1,itemStyle:{borderWidth:0,color:"#4285f4"},label:{backgroundColor:"#f6f8fa",borderColor:"#d1d5da",borderRadius:5,borderWidth:.5,color:"#586069",lineHeight:20,offset:[-5,0],padding:[0,5],position:"insideRight"},lineStyle:{color:"#d1d5da",width:1},roam:!0,symbol:function(e,t){var n;return(null===(n=null==t?void 0:t.data)||void 0===n?void 0:n.children)?"circle":"path://"},type:"tree"}],tooltip:{trigger:"item",triggerOn:"mousemove"}}),e.setAttribute("data-processed","true")}catch(t){e.className="vditor-reset--error",e.innerHTML="mindmap render error: <br>"+t}}}))}))}},818:(e,t,n)=>{n.d(t,{k:()=>i});var r=n(64),a=n(466),i=function(e,t,n){var i="",o=[];if(Array.from(e.children).forEach((function(e,t){if((0,r.W)(e)){if(n){var a=e.id.lastIndexOf("_");e.id=e.id.substring(0,-1===a?void 0:a)+"_"+t}o.push(e.id),i+=e.outerHTML.replace("<wbr>","")}})),""===i)return t.innerHTML="","";var s=document.createElement("div");if(n)n.lute.SetToC(!0),"wysiwyg"!==n.currentMode||n.preview.element.contains(e)?"ir"!==n.currentMode||n.preview.element.contains(e)?s.innerHTML=n.lute.HTML2VditorDOM("<p>[ToC]</p>"+i):s.innerHTML=n.lute.SpinVditorIRDOM("<p>[ToC]</p>"+i):s.innerHTML=n.lute.SpinVditorDOM("<p>[ToC]</p>"+i),n.lute.SetToC(n.options.preview.markdown.toc);else{t.classList.add("vditor-outline");var c=Lute.New();c.SetToC(!0),s.innerHTML=c.HTML2VditorDOM("<p>[ToC]</p>"+i)}var l=s.firstElementChild.querySelectorAll("li > span[data-target-id]");return l.forEach((function(e,t){if(e.nextElementSibling&&"UL"===e.nextElementSibling.tagName){var n="<svg class='vditor-outline__action'><use xlink:href='#vditor-icon-down'></use></svg>";document.getElementById("vditorIconScript")||(n='<svg class="vditor-outline__action" viewBox="0 0 32 32"><path d="M3.76 6.12l12.24 12.213 12.24-12.213 3.76 3.76-16 16-16-16 3.76-3.76z"></path></svg>'),e.innerHTML=n+"<span>"+e.innerHTML+"</span>"}else e.innerHTML="<svg></svg><span>"+e.innerHTML+"</span>";e.setAttribute("data-target-id",o[t])})),i=s.firstElementChild.innerHTML,0===l.length?(t.innerHTML="",i):(t.innerHTML=i,n&&(0,a.H)(t,{katex:n.options.staticPath.katex,mathjax:n.options.staticPath.mathjax,math:n.options.preview.math}),t.firstElementChild.addEventListener("click",(function(r){for(var a=r.target;a&&!a.isEqualNode(t);){if(a.classList.contains("vditor-outline__action")){a.classList.contains("vditor-outline__action--close")?(a.classList.remove("vditor-outline__action--close"),a.parentElement.nextElementSibling.setAttribute("style","display:block")):(a.classList.add("vditor-outline__action--close"),a.parentElement.nextElementSibling.setAttribute("style","display:none")),r.preventDefault(),r.stopPropagation();break}if(a.getAttribute("data-target-id")){r.preventDefault(),r.stopPropagation();var i=document.getElementById(a.getAttribute("data-target-id"));if(!i)return;if(n)if("auto"===n.options.height){var o=i.offsetTop+n.element.offsetTop;n.options.toolbarConfig.pin||(o+=n.toolbar.element.offsetHeight),window.scrollTo(window.scrollX,o)}else n.element.offsetTop<window.scrollY&&window.scrollTo(window.scrollX,n.element.offsetTop),n.preview.element.contains(e)?e.parentElement.scrollTop=i.offsetTop:e.scrollTop=i.offsetTop;else window.scrollTo(window.scrollX,i.offsetTop);break}a=a.parentElement}})),i)}},408:(e,t,n)=>{n.d(t,{B:()=>o});var r=n(54),a=n(526),i=n(156),o=function(e,t){void 0===e&&(e=document),void 0===t&&(t=r.g.STATIC_PATH.plantuml);var n=i.plantumlRenderAdapter.getElements(e);0!==n.length&&(0,a.G)(t,"vditorPlantumlScript").then((function(){n.forEach((function(e){if(!e.parentElement.classList.contains("vditor-wysiwyg__pre")&&!e.parentElement.classList.contains("vditor-ir__marker--pre")){var t=i.plantumlRenderAdapter.getCode(e).trim();if(t)try{e.innerHTML='<img src="http://www.plantuml.com/plantuml/svg/~1'+plantumlEncoder.encode(t)+'">'}catch(t){e.className="vditor-reset--error",e.innerHTML="plantuml render error: <br>"+t}}}))}))}},895:(e,t,n)=>{n.d(t,{X:()=>r});var r=function(e){var t=Lute.New();return t.PutEmojis(e.emojis),t.SetEmojiSite(e.emojiSite),t.SetHeadingAnchor(e.headingAnchor),t.SetInlineMathAllowDigitAfterOpenMarker(e.inlineMathDigit),t.SetAutoSpace(e.autoSpace),t.SetToC(e.toc),t.SetFootnotes(e.footnotes),t.SetFixTermTypo(e.fixTermTypo),t.SetVditorCodeBlockPreview(e.codeBlockPreview),t.SetVditorMathBlockPreview(e.mathBlockPreview),t.SetSanitize(e.sanitize),t.SetChineseParagraphBeginningSpace(e.paragraphBeginningSpace),t.SetRenderListStyle(e.listStyle),t.SetLinkBase(e.linkBase),t.SetLinkPrefix(e.linkPrefix),t.SetMark(e.mark),t.SetGFMAutoLink(e.gfmAutoLink),e.lazyLoadImage&&t.SetImageLazyLoading(e.lazyLoadImage),t}},863:(e,t,n)=>{n.d(t,{E:()=>r});var r=function(e,t,n){void 0===t&&(t="zh_CN"),void 0===n&&(n="classic");var r=e.getBoundingClientRect();document.body.insertAdjacentHTML("beforeend",'<div class="vditor vditor-img'+("dark"===n?" vditor--dark":"")+'">\n    <div class="vditor-img__bar">\n      <span class="vditor-img__btn" data-deg="0">\n        <svg><use xlink:href="#vditor-icon-redo"></use></svg>\n        '+window.VditorI18n.spin+"\n      </span>\n      <span class=\"vditor-img__btn\"  onclick=\"this.parentElement.parentElement.outerHTML = '';document.body.style.overflow = ''\">\n        X &nbsp;"+window.VditorI18n.close+'\n      </span>\n    </div>\n    <div class="vditor-img__img" onclick="this.parentElement.outerHTML = \'\';document.body.style.overflow = \'\'">\n      <img style="width: '+e.width+"px;height:"+e.height+"px;transform: translate3d("+r.left+"px, "+(r.top-36)+'px, 0)" src="'+e.getAttribute("src")+'">\n    </div>\n</div>'),document.body.style.overflow="hidden";var a=document.querySelector(".vditor-img img"),i="translate3d("+Math.max(0,window.innerWidth-e.naturalWidth)/2+"px, "+Math.max(0,window.innerHeight-36-e.naturalHeight)/2+"px, 0)";setTimeout((function(){a.setAttribute("style","transition: transform .3s ease-in-out;transform: "+i),setTimeout((function(){a.parentElement.scrollTo((a.parentElement.scrollWidth-a.parentElement.clientWidth)/2,(a.parentElement.scrollHeight-a.parentElement.clientHeight)/2)}),400)}));var o=document.querySelector(".vditor-img__btn");o.addEventListener("click",(function(){var t=parseInt(o.getAttribute("data-deg"),10)+90;t/90%2==1&&e.naturalWidth>a.parentElement.clientHeight?a.style.transform="translate3d("+Math.max(0,window.innerWidth-e.naturalWidth)/2+"px, "+(e.naturalWidth/2-e.naturalHeight/2)+"px, 0) rotateZ("+t+"deg)":a.style.transform=i+" rotateZ("+t+"deg)",o.setAttribute("data-deg",t.toString()),setTimeout((function(){a.parentElement.scrollTo((a.parentElement.scrollWidth-a.parentElement.clientWidth)/2,(a.parentElement.scrollHeight-a.parentElement.clientHeight)/2)}),400)}))}},312:(e,t,n)=>{n.d(t,{Y:()=>i});var r=n(54),a=n(578),i=function(e,t){void 0===t&&(t=r.g.STATIC_PATH.highlight),r.g.CODE_THEME.includes(e)||(e="github");var n=document.getElementById("vditorHljsStyle"),i=t+"/styles/"+e+".css";n?n.href!==i&&(n.remove(),(0,a.c)(i,"vditorHljsStyle")):(0,a.c)(i,"vditorHljsStyle")}},227:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(578),a=function(e,t){if(e&&t){var n=document.getElementById("vditorContentTheme"),a=t+"/"+e+".css";n?n.getAttribute("href")!==a&&(n.remove(),(0,r.c)(a,"vditorContentTheme")):(0,r.c)(a,"vditorContentTheme")}}},526:(e,t,n)=>{n.d(t,{G:()=>a,J:()=>r});var r=function(e,t){if(document.getElementById(t))return!1;var n=new XMLHttpRequest;n.open("GET",e,!1),n.setRequestHeader("Accept","text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01"),n.send("");var r=document.createElement("script");r.type="text/javascript",r.text=n.responseText,r.id=t,document.head.appendChild(r)},a=function(e,t){return new Promise((function(n,r){if(document.getElementById(t))return n(),!1;var a=document.createElement("script");a.src=e,a.async=!0,document.head.appendChild(a),a.onload=function(){if(document.getElementById(t))return a.remove(),n(),!1;a.id=t,n()}}))}},578:(e,t,n)=>{n.d(t,{c:()=>r});var r=function(e,t){if(!document.getElementById(t)){var n=document.createElement("link");n.id=t,n.rel="stylesheet",n.type="text/css",n.href=e,document.getElementsByTagName("head")[0].appendChild(n)}}},51:(e,t,n)=>{n.d(t,{X:()=>r});var r=function(e){return e.replace(/\u00a0/g," ")}},827:(e,t,n)=>{n.d(t,{fb:()=>a,lG:()=>r});var r=function(e,t){if(!e)return!1;3===e.nodeType&&(e=e.parentElement);for(var n=e,r=!1;n&&!r&&!n.classList.contains("vditor-reset");)n.nodeName===t?r=!0:n=n.parentElement;return r&&n},a=function(e,t){if(!e)return!1;3===e.nodeType&&(e=e.parentElement);for(var n=e,r=!1;n&&!r&&!n.classList.contains("vditor-reset");)n.classList.contains(t)?r=!0:n=n.parentElement;return r&&n}},64:(e,t,n)=>{n.d(t,{W:()=>r});var r=function(e){var t=function(e,t){if(!e)return!1;3===e.nodeType&&(e=e.parentElement);for(var n=e,r=!1;n&&!r&&!n.classList.contains("vditor-reset");)0===n.nodeName.indexOf(t)?r=!0:n=n.parentElement;return r&&n}(e,"H");return!(!t||2!==t.tagName.length||"HR"===t.tagName)&&t}},640:(e,t,n)=>{n.d(t,{T:()=>r});var r=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},a=function(e){for(var t in e)e.hasOwnProperty(t)&&("[object Object]"===Object.prototype.toString.call(e[t])?n[t]=r(n[t],e[t]):n[t]=e[t])},i=0;i<e.length;i++)a(e[i]);return n}},393:(e,t,n)=>{n.d(t,{Hc:()=>r});n(54);var r=function(e){var t=window.getSelection();t.removeAllRanges(),t.addRange(e)}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{n.d(r,{default:()=>M});var e=n(478),t=n(156),a=n(314),i=n(730),o=n(66),s=n(218),c=n(702),l=function(e){void 0===e&&(e=document);var t=function(e){var t=document.createElement("img");t.src=e.getAttribute("data-src"),t.addEventListener("load",(function(){e.getAttribute("style")||e.getAttribute("class")||e.getAttribute("width")||e.getAttribute("height")||t.naturalHeight>t.naturalWidth&&t.naturalWidth/t.naturalHeight<document.querySelector(".vditor-reset").clientWidth/(window.innerHeight-40)&&t.naturalHeight>window.innerHeight-40&&(e.style.height=window.innerHeight-40+"px"),e.src=t.src})),e.removeAttribute("data-src")};if(!("IntersectionObserver"in window))return e.querySelectorAll("img").forEach((function(e){e.getAttribute("data-src")&&t(e)})),!1;window.vditorImageIntersectionObserver?(window.vditorImageIntersectionObserver.disconnect(),e.querySelectorAll("img").forEach((function(e){window.vditorImageIntersectionObserver.observe(e)}))):(window.vditorImageIntersectionObserver=new IntersectionObserver((function(e){e.forEach((function(e){(void 0===e.isIntersecting?0!==e.intersectionRatio:e.isIntersecting)&&e.target.getAttribute("data-src")&&t(e.target)}))})),e.querySelectorAll("img").forEach((function(e){window.vditorImageIntersectionObserver.observe(e)})))},d=n(466),m=n(554),u=n(40),p=n(563),h=n(749),g=n(818),v=n(408),f=n(54),w=n(227),T=n(526),y=n(827),S=n(640),A=n(895),b=n(393),_=function(e,t){if(void 0===t&&(t="zh_CN"),"undefined"!=typeof speechSynthesis&&"undefined"!=typeof SpeechSynthesisUtterance){var n='<svg><use xlink:href="#vditor-icon-play"></use></svg>',r='<svg><use xlink:href="#vditor-icon-pause"></use></svg>';document.getElementById("vditorIconScript")||(n='<svg viewBox="0 0 32 32"><path d="M3.436 0l25.128 16-25.128 16v-32z"></path></svg>',r='<svg viewBox="0 0 32 32"><path d="M20.617 0h9.128v32h-9.128v-32zM2.255 32v-32h9.128v32h-9.128z"></path></svg>');var a=document.querySelector(".vditor-speech");if(!a){(a=document.createElement("div")).className="vditor-speech",document.body.insertAdjacentElement("beforeend",a);var i=function(){var e,n;return speechSynthesis.getVoices().forEach((function(r){r.lang===t.replace("_","-")&&(e=r),r.default&&(n=r)})),e||(e=n),e};void 0!==speechSynthesis.onvoiceschanged&&(speechSynthesis.onvoiceschanged=i);var o=i();a.onclick=function(){if("vditor-speech"===a.className){var e=new SpeechSynthesisUtterance(a.getAttribute("data-text"));e.voice=o,e.onend=function(){a.className="vditor-speech",speechSynthesis.cancel(),a.innerHTML=n},speechSynthesis.speak(e),a.className="vditor-speech vditor-speech--current",a.innerHTML=r}else speechSynthesis.speaking&&(speechSynthesis.paused?(speechSynthesis.resume(),a.innerHTML=r):(speechSynthesis.pause(),a.innerHTML=n));(0,b.Hc)(window.vditorSpeechRange)},document.body.addEventListener("click",(function(){""===getSelection().toString().trim()&&"block"===a.style.display&&(a.className="vditor-speech",speechSynthesis.cancel(),a.style.display="none")}))}e.addEventListener("mouseup",(function(e){var t=getSelection().toString().trim();if(speechSynthesis.cancel(),""!==getSelection().toString().trim()){window.vditorSpeechRange=getSelection().getRangeAt(0).cloneRange();var r=getSelection().getRangeAt(0).getBoundingClientRect();a.innerHTML=n,a.style.display="block",a.style.top=r.top+r.height+document.querySelector("html").scrollTop-20+"px",a.style.left=e.clientX+2+"px",a.setAttribute("data-text",t)}else"block"===a.style.display&&(a.className="vditor-speech",a.style.display="none")}))}},E=function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},L=function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},k=function(e){var t={anchor:0,cdn:f.g.CDN,dist:f.g.DIST,staticPath:f.g.STATIC_PATH,customEmoji:{},emojiPath:(e&&e.emojiPath||f.g.CDN)+"/"+f.g.DIST+"/"+f.g._STATIC_PATH.emoji,hljs:f.g.HLJS_OPTIONS,icon:"ant",lang:"zh_CN",markdown:f.g.MARKDOWN_OPTIONS,math:f.g.MATH_OPTIONS,mode:"light",speech:{enable:!1},theme:f.g.THEME_OPTIONS};return(0,S.T)(t,e)},x=function(e,t){var n=k(t);return(0,T.G)(n.staticPath.lute,"vditorLuteScript").then((function(){var r=(0,A.X)({autoSpace:n.markdown.autoSpace,gfmAutoLink:n.markdown.gfmAutoLink,codeBlockPreview:n.markdown.codeBlockPreview,emojiSite:n.emojiPath,emojis:n.customEmoji,fixTermTypo:n.markdown.fixTermTypo,footnotes:n.markdown.footnotes,headingAnchor:0!==n.anchor,inlineMathDigit:n.math.inlineDigit,lazyLoadImage:n.lazyLoadImage,linkBase:n.markdown.linkBase,linkPrefix:n.markdown.linkPrefix,listStyle:n.markdown.listStyle,mark:n.markdown.mark,mathBlockPreview:n.markdown.mathBlockPreview,paragraphBeginningSpace:n.markdown.paragraphBeginningSpace,sanitize:n.markdown.sanitize,toc:n.markdown.toc});return(null==t?void 0:t.renderers)&&r.SetJSRenderers({renderers:{Md2HTML:t.renderers}}),r.SetHeadingID(!0),r.Md2HTML(e)}))},H=function(t,n,r){return E(void 0,void 0,void 0,(function(){var g,f,S;return L(this,(function(A){switch(A.label){case 0:return g=k(r),[4,x(n,g)];case 1:if(f=A.sent(),g.transform&&(f=g.transform(f)),t.innerHTML=f,t.classList.add("vditor-reset"),g.i18n)return[3,5];if(["en_US","fr_FR","pt_BR","ja_JP","ko_KR","ru_RU","sv_SE","zh_CN","zh_TW"].includes(g.lang))return[3,2];throw new Error("options.lang error, see https://ld246.com/article/1549638745630#options");case 2:return S="vditorI18nScript"+g.lang,document.querySelectorAll('head script[id^="vditorI18nScript"]').forEach((function(e){e.id!==S&&document.head.removeChild(e)})),[4,(0,T.G)(g.staticPath.i18n+"/"+g.lang+".js",S)];case 3:A.sent(),A.label=4;case 4:return[3,6];case 5:window.VditorI18n=g.i18n,A.label=6;case 6:return g.icon?[4,(0,T.G)(g.staticPath.icons+"/"+g.icon+".js","vditorIconScript")]:[3,8];case 7:A.sent(),A.label=8;case 8:return(0,w.Z)(g.theme.current,g.theme.path),1===g.anchor&&t.classList.add("vditor-reset--anchor"),(0,i.O)(t),(0,c.s)(g.hljs,t,g.staticPath.highlight),(0,d.H)(t,{katex:g.staticPath.katex,mathjax:g.staticPath.mathjax,math:g.math}),(0,u.i)(t,g.staticPath.mermaid,g.mode),(0,p.K)(t,g.staticPath.markmap,g.mode),(0,o.P)(t,g.staticPath.flowchart),(0,s.v)(t,g.staticPath.graphviz),(0,a.p)(t,g.staticPath.echarts,g.mode),(0,h.P)(t,g.staticPath.echarts,g.mode),(0,v.B)(t,g.staticPath.plantuml),(0,e.Q)(t,g.staticPath.abc),(0,m.Y)(t),g.speech.enable&&_(t),0!==g.anchor&&(b=g.anchor,document.querySelectorAll(".vditor-anchor").forEach((function(e){1===b&&e.classList.add("vditor-anchor--left"),e.onclick=function(){var t=e.getAttribute("href").substr(1),n=document.getElementById("vditorAnchor-"+t).offsetTop;document.querySelector("html").scrollTop=n}})),window.onhashchange=function(){var e=document.getElementById("vditorAnchor-"+decodeURIComponent(window.location.hash.substr(1)));e&&(document.querySelector("html").scrollTop=e.offsetTop)}),g.after&&g.after(),g.lazyLoadImage&&l(t),t.addEventListener("click",(function(e){var n=(0,y.lG)(e.target,"SPAN");if(n&&(0,y.fb)(n,"vditor-toc")){var r=t.querySelector("#"+n.getAttribute("data-target-id"));r&&window.scrollTo(window.scrollX,r.offsetTop)}else;})),[2]}var b}))}))},j=n(863),C=n(312);const M=function(){function n(){}return n.adapterRender=t,n.previewImage=j.E,n.codeRender=i.O,n.graphvizRender=s.v,n.highlightRender=c.s,n.mathRender=d.H,n.mermaidRender=u.i,n.markmapRender=p.K,n.flowchartRender=o.P,n.chartRender=a.p,n.abcRender=e.Q,n.mindmapRender=h.P,n.plantumlRender=v.B,n.outlineRender=g.k,n.mediaRender=m.Y,n.speechRender=_,n.lazyLoadImageRender=l,n.md2html=x,n.preview=H,n.setCodeTheme=C.Y,n.setContentTheme=w.Z,n}()})(),r=r.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,